So I'm generalizing Filer's storage mechanism into a database, and I've already written some stuff in Haskell for it. But I've got some more ideas, so I figured I should write a technote about it.

So, as it is right now, HashDB is a graph database where objects can be added and deleted, but not changed after they are created. Each object has a number of attributes and values; the attributes are strings and the values are binary data. Each object also has a number of outgoing refs, each of which point to exactly one other object and each of which also have a set of attributes and values.

Each object has a hash associated with it; the hash is computed from the object's attributes and values and all outgoing refs and their attributes and values. An object cannot be changed after it's created; this in particular means that new outgoing refs cannot be added to an object after the object has been created. Incoming refs can, of course, be added by creating another object.

A database stores only one copy of every object. Adding an object that already exists in a database does nothing.

So that's how things stand at present. I hadn't yet worked out whether every object pointed to by a ref has to be present in a given database, so that's still a question to think about.

So, the idea I'm getting now to complement this whole system is schemas. I got thinking, it's somewhat wasteful to have lots of logic to check to see if a commit object, for example, has refs pointing to a file or folder and a changeset, and issue an error if not. And when would the error occur? If it's when pulling a malformed commit, then it gets a lot harder to have pushing/pulling be implemented at the HashDB level, as Filer would need to have some input. If it's after that, then the user doesn't find out that they've pulled a malformed commit until they actually go to use it, which in my opinion is unacceptable.

So I got this brilliant idea: schemas. Objects gain an additional aspect, so to speak, which is the hash of the schema object that they conform to. Schema objects specify, in some format or other that I haven't decided on yet, things like what attributes must be present and what types their values must be (I'm thinking attributes can have types other than just binary data in order to facilitate queries like looking for all commits that happened within a particular date range) and what refs with what attributes may be present and such.

Then HashDB itself would enforce that any object being inserted into the database, whether because it's just been created from scratch or because it's being pulled from somewhere, conforms to its schema.

The reason that this is so lovely is that then, instead of querying for anything with an attribute "type" whose value is "filer.commit" or some such thing, we can query for anything with the commit schema, which would be identified by a particular hash. And since the hash is the hash of the object containing the actual schema that the objects have to match, and since HashDB enforces that an object matches its schema, whatever its schema is, then we know that all results we get back will match the commit schema and thus will have everything we want.

This also goes a long way toward solving namespacing problems that arise with using attributes like "type" to identify objects; before, there was a good chance of conflict, but now, there's relatively little, as I'm thinking schemas will somehow include a name and perhaps a description of what they are, and so two schemas would only conflict if they had the exact same name and description and actual schema specification, in which case chances are pretty high they're actually the same schema designed by the same person for the same purpose.

So, a new term needs to be introduced for this, and that is dependency. An object has a dependency on (or is equivalently said to depend on) another object if it has a ref pointing to said object or if its schema is said object.

One important difference between ref-related dependencies and schema-related dependencies is that I'm considering allowing a HashDB to contain objects that point to non-existent objects, the reason being that "databases" like archive files (files that contain an exported copy of a set of objects from a database; they will be used in filer pushing and pulling and when creating filer archives and will allow most of the push/pull system to be implemented at the HashDB level) will almost never be complete copies of the database, but will instead omit some objects that are known to exist on the recipient's end already. HashDB will be perfectly happy to allow this, although there will be some mechanism to produce an error if, say, a query could have returned more results but for missing objects.

HashDB will not, however, permit an object's schema to be missing. If an object is inserted into a database, its schema must already be present.

This makes copying things between databases slightly more complicated, but not too much.

Slight detour: I'm currently writing HashDB in Haskell, which I'm liking quite well at present.

So, I'm thinking I'll have a utility library in the Haskell implementation that has, say, copyObject :: (ReadDB r, WriteDB w) => r -> w -> Hash -> IO (), which copies a single object and takes care to copy its schema as well if it's not already present, and perhaps copyObjectAndRefs (with the same signature) that copies an object and all of its refs. And I might have copyAll :: (ReadDB r, WriteDB w) => r -> w -> IO (), which copies all objects present in r into w. (This would be useful for pulling; a list of objects not present locally is somehow exchanged with the remote end, which sends an archive to the local end, which then imports it with copyAll archiveDb localDb.)

One other issue I'm facing with schemas is the fact that HashDB, by its very nature of using object hashes, provides a directed acyclic graph: cycles cannot exist. The problem, of course, is that while the schema of a schema can be a schema defining the format of schemas themselves, there isn't really a clear-cut answer to what the schema of the schema of schemas should be. Ideally it would be itself, but that's not possible since cycles can't exist.

Perhaps, then, schemas don't themselves have a schema, or at least they're not required to. Their format would be checked when inserting an object that uses them as its schema; HashDB would reject any object whose referenced schema is malformed. This would incur a performance penalty as the validity of every object's schema has to be checked (and thus the schema actually read from the database) when inserting the object, but smart HashDB libraries could keep an internal list of schemas that have already been verified since opening the database and consult that list before reverifying a schema.

So that's all good. Now I need to work out a schema format.

Well, first I need to work out what schemas can actually specify.

And I also need to work out how attribute values work, as I want them to be able to have values other than just binary data.

So, first off, queries specify constraints on attributes that are typed to a particular type of attribute value, and attributes that exist but do not have that type of value do not match. So, for example, a query matching an object with an attribute "test" whose value is an int greater than 5 will not match objects with an attribute "test" whose value is the string "6". I expect I'll add queries that query an attribute's type, such that one could query for all objects with an attribute "test" whose value is of type Int, irrespective of the actual value.

(And this would also allow for data types like IntQuery, with constructors like GreaterThan Int, LessThan Int, AnyInt, and so on, and then a data type like ValueQuery, with constructors like IntValue IntQuery, StringValue StringQuery, and AnyValue. One could then query for objects with an attribute "test" which matches AnyValue, for example, to get objects that have a "test" attribute, and IntQuery AnyInt to get objects that have a "test" attribute whose value is of type Int.)

I'll leave the list of supported types for later, but I'm thinking they could include Int (although I'll probably use Integer, to support arbitrary precision), Binary (represented as a ByteString), String, and Bool. I might add a floating-point value if I can come up with a good cross-language representation for one. Null values won't be allowed; in cases where one is needed, the attribute should just be omitted altogether. (Schemas will, of course, include a way to specify that a particular attribute is not required, but that if it is present, it is to have such-and-such a type and such-and-such other things as specified by the schema.)

So that's attributes for now.

Now, schemas...

My initial feeling, for simplicity's sake, is to have the schema itself be a bunch of binary data (or textual data; could use read/show for an initial prototype and write a more cross-language solution later) which is generated from some Haskell data types expressing the schema. Then we just have a handful of attributes on schema objects specifying things like the schema's name (a textual description like "filer.commit") and perhaps a description, and then an attribute holding the schema itself.

That sounds good. So, what things should schemas be able to specify?

Well, there should be a way to specify that an attribute with a given name has to exist, with any value.

And there should be a way to specify that an attribute with a given name has to exist and has to be of a certain type.

And there should be a way to specify that an attribute is not required to exist, but that if it does, it has to be of a certain type.

I don't know if I'll put any value constraints on attributes for now, as I don't know that there's really much of a reason to at present.

So that's pretty much good for attributes for now. Now for refs...

The problem with refs is that they almost need their own schemas separate from the object's schema. The point being, one can ask for an object that uses the page schema, and this object should have zero or more refs pointing to other pages, with attributes specifying what link in the page this ref represents. But how do you ask the object for all refs that point to said other pages with the relevant attributes present? This runs into the same problem with a commit object not having things required by commit objects.

And that makes me think that we need a notion of object schemas and ref schemas. Object schemas would specify the attributes necessary on an object, and information about which refs an object must have, which would somehow specify a ref schema that the ref must conform to. Ref schemas would, then, be specifications of what attributes must be present on a ref, and perhaps what sort of object it points to.

When creating an object, then, a schema would be specified for the object, and a schema would be specified for each of its refs. Ref schemas would themselves just be objects.

This presents one problem, and that is that filer's schema would require circular dependencies among schemas: the commit schema would specify that exactly one commit-to-child ref must exist, the commit-to-ref schema would specify that the pointed-to object must conform either to the folder schema or the file schema, the folder schema would specify that zero or more folder-to-child refs must exist, and the folder-to-child schema would specify that the pointed-to object must conform to the commit schema (and that a name attribute, whose value is a string, must be present on the ref). So there's a problem.

One obvious solution would be to allow schema objects to contain multiple schemas, each perhaps with a name, and then allow schemas the ability to reference their own object. Then schemas would be referred to by the hash of the object that contains them and their name, which might represent the attribute of the object on which they're stored. Schemas could then, when referring to other schemas, omit the hash part, which would mean that they refer to the schema object in which they're contained.

Another solution, along similar lines, would be to somehow split schemas out into two separate types of objects. One type would contain individual ref and object schemas, one schema per object, and the second would be an object with refs to every individual schema it includes. The first objects would contain pointers to other named schemas, and the second object would essentially link those all together.

So maybe the first type of object could be called a schema template, and the second type of object could be called a schema group, with the combined whole being called a schema.

Refs from schema groups to schema templates would then specify the name that the template is to assume within the group, and a given schema would not be considered valid if any of its templates referred to names not given to any other templates within the group.

This would solve the circular dependency problem quite nicely, but it's really complicated, and I'm somewhat hesitant to implement it as a result.

There's just too many opportunities for circular schema dependencies that I can think of... More are surfacing when I think about how OpenGroove would work...

So I think, for now, that I'm going to go with the old way of doing schemas, and have ref schemas not specify the type of object that they point to. And then I'll just let runtime errors happen as they happen if it's not the right type of object.

Although I would really like to revisit the problem in the future and see if I can't think of some way to link things up... But I'll worry about that later, and get a prototype working for now.

You know, I might even just let a schema be specified or not for now, and not do any validation on it yet, until I've got all of the other mechanics working first. Then I'll see. Or something like that.


























