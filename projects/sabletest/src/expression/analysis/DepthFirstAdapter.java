/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.analysis;

import java.util.*;
import expression.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getAddp() != null)
        {
            node.getAddp().apply(this);
        }
        outAExpr(node);
    }

    public void inANextAddp(ANextAddp node)
    {
        defaultIn(node);
    }

    public void outANextAddp(ANextAddp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextAddp(ANextAddp node)
    {
        inANextAddp(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextAddp(node);
    }

    public void inAInAddp(AInAddp node)
    {
        defaultIn(node);
    }

    public void outAInAddp(AInAddp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInAddp(AInAddp node)
    {
        inAInAddp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAInAddp(node);
    }

    public void inANextSubp(ANextSubp node)
    {
        defaultIn(node);
    }

    public void outANextSubp(ANextSubp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextSubp(ANextSubp node)
    {
        inANextSubp(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextSubp(node);
    }

    public void inAInSubp(AInSubp node)
    {
        defaultIn(node);
    }

    public void outAInSubp(AInSubp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInSubp(AInSubp node)
    {
        inAInSubp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAInSubp(node);
    }

    public void inANextMulp(ANextMulp node)
    {
        defaultIn(node);
    }

    public void outANextMulp(ANextMulp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextMulp(ANextMulp node)
    {
        inANextMulp(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextMulp(node);
    }

    public void inAInMulp(AInMulp node)
    {
        defaultIn(node);
    }

    public void outAInMulp(AInMulp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInMulp(AInMulp node)
    {
        inAInMulp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAInMulp(node);
    }

    public void inANextDivp(ANextDivp node)
    {
        defaultIn(node);
    }

    public void outANextDivp(ANextDivp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextDivp(ANextDivp node)
    {
        inANextDivp(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextDivp(node);
    }

    public void inAInDivp(AInDivp node)
    {
        defaultIn(node);
    }

    public void outAInDivp(AInDivp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInDivp(AInDivp node)
    {
        inAInDivp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAInDivp(node);
    }

    public void inANextUnmp(ANextUnmp node)
    {
        defaultIn(node);
    }

    public void outANextUnmp(ANextUnmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextUnmp(ANextUnmp node)
    {
        inANextUnmp(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextUnmp(node);
    }

    public void inAInUnmp(AInUnmp node)
    {
        defaultIn(node);
    }

    public void outAInUnmp(AInUnmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInUnmp(AInUnmp node)
    {
        inAInUnmp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAInUnmp(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAParensTerm(AParensTerm node)
    {
        defaultIn(node);
    }

    public void outAParensTerm(AParensTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParensTerm(AParensTerm node)
    {
        inAParensTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParensTerm(node);
    }
}
