/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.analysis;

import java.util.*;
import expression.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAExpr(AExpr node)
    {
        defaultCase(node);
    }

    public void caseANextAddp(ANextAddp node)
    {
        defaultCase(node);
    }

    public void caseAInAddp(AInAddp node)
    {
        defaultCase(node);
    }

    public void caseANextSubp(ANextSubp node)
    {
        defaultCase(node);
    }

    public void caseAInSubp(AInSubp node)
    {
        defaultCase(node);
    }

    public void caseANextMulp(ANextMulp node)
    {
        defaultCase(node);
    }

    public void caseAInMulp(AInMulp node)
    {
        defaultCase(node);
    }

    public void caseANextDivp(ANextDivp node)
    {
        defaultCase(node);
    }

    public void caseAInDivp(AInDivp node)
    {
        defaultCase(node);
    }

    public void caseANextUnmp(ANextUnmp node)
    {
        defaultCase(node);
    }

    public void caseAInUnmp(AInUnmp node)
    {
        defaultCase(node);
    }

    public void caseANumberTerm(ANumberTerm node)
    {
        defaultCase(node);
    }

    public void caseAParensTerm(AParensTerm node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
