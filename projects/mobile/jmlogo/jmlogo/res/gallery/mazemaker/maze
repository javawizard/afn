to maze :width :height :pathsize
local "ph make "ph 0
ignore [ph should be heading but it wont work]
local "halfsize make "halfsize round quotient :pathsize 2
make "pathsize product :halfsize 2
local "x local "y
repeat :width [make "x repcount ~
 repeat :height [make "y repcount make maze.cellname :x :y (list round first pos round last pos) ~
 make maze.visitedname :x :y "false ~
 maze.cell penup forward :pathsize setpos (list round first pos round last pos) pendown] ~
 penup back product :pathsize :height right 90 forward :pathsize left 90 setpos (list round first pos round last pos)]
right 90 back product :pathsize :width left 90
local "pushloop
local "next
local "current
make "current [1 1]
make "pushloop []
push "pushloop [1 1]
make maze.visitedname 1 1 "true
while [not emptyp :pushloop] [make "next maze.choosecell :current ~
 ifelse emptyp :next [ignore pop "pushloop ifelse not emptyp :pushloop [make "current first :pushloop] []] [ ~
 penup setpos thing maze.cellname2 :current setheading towards thing maze.cellname2 :next ~
 maze.carve make "current :next push "pushloop :current make maze.visitedname2 :current "true]]
setpos thing maze.cellname 1 1
repeat :width [make "x repcount repeat :height [make "y repcount ~
 ern maze.cellname :x :y ern maze.visitedname :x :y]]
setheading :ph
end