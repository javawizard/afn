So now I'm thinking that the ideas in desc.txt have some problems, and are getting somewhat confusing. 

I think the main abilities I want the bot to have come down to these:

    Ability to create factoids without much programming knowledge, IE ones that match the factoid's literal name and don't contain special characters
    
    Ability to create factoids that match based on regex, and ability for the factoid to get the content of matcher groups in the expression
    
    Ability to program the bot (or parts of it) via javascript using pastebin, with the ability for programs to be triggered off of join, part, kick, ban, message, external event, and schedule (IE a program somehow registers that it should be triggered every X seconds or once X seconds into the future) events, and the ability for programs such as these to store temporary data, persistent data, and communicate with users on other protocols, servers, and rooms
    
    Ability to scope factoids to a particular protocol, server, or room
    
    Ability to restrict access to programs and highly-privileged factoid commands
    
    Ability to call commands and other factoids from within a factoid, possibly somewhat restricted (maybe just superop-created factoids can do that)
    
    Ability for programs to communicate with the outside world, maybe by urlfetch, to allow for the current weather factoid to be written as a program
    
    Ability for text sent to the bot in pm and text sent to a channel (with and without a trigger) to be filtered out by factoids/programs, regardless of whether or not it would trigger a command, and an escape sequence that can be used to force interpretation as a command, when the input in question would constitute a command with the escape sequence removed, to avoid a problem where, for example, a factoid is created that overrides deleting of factoids, thereby preventing itself and any other factoid from being deleted (consider !!! for this purpose)
    
    Ability for programs to be stateful with respect to a single user, probably an extension of the storage provided to programs but probably with additional bot-provided facilities allowing data for that particular user to be stored in such a manner that it will be cleared after a time if not accessed
    
    Ability for the bot's data (factoids and programs), optionally including program storage, to be exported into some sort of human-readable format by a superop (and then probably posted to pastebin)
    
    Ability for a particular user on a server to be contacted in multiple, protocol-specific ways, and the ability of programs (and possibly factoids) to detect this and respond using the same method. An example of this would be facebook's ability for users to communicate with the bot by sending it a chat message, sending it a facebook message, and posting on its wall. The bot's friends' posting updates on their own wall would be seen as a special event by the bot, not a message. This might also call for multi-line messages to be held as a single unit, so that in a chat message they are sent as multiple chat messages but in a wall post they are sent as the same post (if facebook allows newlines in wall posts).
    
    Ability for protocol-specific options to be specified in a factoid reply (and possibly ability for calling factoids to choose whether or not to inherit these somehow). An example is a facebook-specific option to delete a wall post once the reply has been sent for it.
    
    Ability for some sort of special factoid or program that can be given access to an entire message to attempt to process, even one containing newlines, and then the message will be tokenized into lines afterward if it could not be processed as a whole
    
    Ability for protocols to instruct the bot to process special, protocol-specific events, and programs (and maybe even factoids) can be run for these events. These events might be filterable to improve speed (since javascript code execution is somewhat slow and javascript is the interpreted language that I think I'm going to go with for now). For example, facebook should be able to alert the bot when someone asks it to be friends, or when a friend sends an invitation or receives an update (such as the friend posting a photo or some videos), and bzflag should be able to alert the bot when a user is kicked or banned, a user's ip address info when a user joins (if the bot is a bzflag administrator at the server in question), when a variable is changed, or when a flag capture occurs and maybe, if the system is fast enough, when a kill takes place. If filtering is fast enough, then an event on a flag pick up or drop would be useful, so that the bot could announce when a player grabs the genocide flag.
    
    Ability for a room's trigger to be configured, and for programs and factoids to be able to have access to this so that some factoids can require the trigger if it's at a room and some factoids can not require the trigger at all
    
    Ability to ban users based on their authenticated name or nickname, which would be protocol-independent, and also using a custom, protocol-specific, string, to take advantage of protocol-specific options (like bzflag's ban duration and irc's wildcard support)
   

    
Ultimately, there are some programs that I'd like to be able to write for the bot. I'd like to be able to have the bot itself not have any of these programs built in; these programs would then be written for the bot in javascript via pastebin so that the programs themselves could be altered at any time.

    A reminder service, so that a user can ask to be reminded about a particular event at a particular time. This might also call for a shared-user linking system, so that a user with an authenticated name at one server might link it with an authenticated name at another server, thereby allowing reminders scheduled at one server to be sent to the user when they are signed on to other servers. It might also be nice if a one-time service could somehow be linked in such away that the bot would sign back on to the one-time service to notify the user about the event and then promptly sign off again. This would have to be restricted somehow to prevent join spamming of one-time services.
    
    Some games such as roulette and mastermind, which can be played on a channel (where they remember state based on the room) or via privmsg (where they remember state based on the user, whether that's based on their authenticated name or nickname has not yet been decided but I'm leaning toward the nickname since only irc allows that to change during a session). These games might want to remember statistics (such as how often a particular player gets hit for roulette and which players guess most accurately for mastermind).
    
    A weather-providing service, which would hopefully be location-independent (IE works for english postal codes too)
    
    Ability for cross-server communications, possibly restricted to a list of users that have permission to do such. This would be in the form of two things: 1, sending a message to a particular user on a particular server via the bot, and 2, watching a room on a different server via the bot, either at a room (where the bot says everything said on the listening room to the target room), or via privmsg (where the bot pm's everything said at the listening room to a particular user)
    
    Allow the bot to join a bzflag server and summarily kick/ban for language. The language file should be configured on a per-server basis, and perhaps a shared language file can be set up for a set of servers by a superop or someone granted permissions on that language file and server.
    
    Allow the bot to join a bzflag server and provide extra, interactive, tools for admins. One of these would be a tool that tells admins if a user signed on and they have been on in the last, say, hour with the same ip but a different callsign (for example, "javawizard2539 has used 1 other callsign in the last hour, '~cih 10.20.30.40' for info", cih stands for Callsign/IP History). Another useful one would be the ability for the bot to send messages containing lang that are sent to teamchat or privmsg to admins (which would require a server plugin that would send a special message to the bot). 
    
    Some sort of integration of the bot and bznetwork, to provide various services such as warnings that the server is going to go down shortly.
    
    A simple equation evaluator, so you could do "~calc (5+3)-6" and the bot would respond with "(5+3)-6=2"
    
    Some sort of botmail. This could also allow sending to a user that has linked accounts (see the first item in this list), and the user will receive the message on any of those accounts until they acknowledge it, including in real time.
    
    A student program (see UCBLogo's student.lgo). This is essentially a story-problem solver, and would have to be somewhat stateful due to student.lgo requiring more input if not enough is given. I'd like to find an alternate program for that (which might need to be written in native java and then interfaced to via a bot logo program), since student.lgo has some bugs and runs dead slow. Also, the planned scripting language for the bot was logo but is not javascript, so a logo interpreter might have to be included (I wrote one a while back for JMLogo) in java and then appropriate calls in javascript added, so that javascript code can call into logo code and possibly vice versa.
    
    
    
    
    
Protocols that I'd like to support:

    IRC
    Facebook
    AIM
    MSN
    GTalk (and probably any XMPP server)
    MS Groove*
    Email (you send an email to, I'm thinking, marlenjackson@opengroove.org)
    Web (you visit a site and enter commands)
    BZFlag
    Yahoo
    
* would require a vm with windows on it. Consider using Windows 7 for now until it expires on the downstairs computer, running in virtualbox, and then have the bot listen for connections from a groove adapter program that talks with the bot and with a Groove instance running locally via the groove api to exchange data.
   
   
   
Ok, so now I'm getting a good idea that previously wasn't a good idea because of some problems that I just resolved. I'm thinking that all of the bot, except for protocol implementations which require a level of access to java classes that I wouldn't like to give to javascript code, and a simple master interface, would be coded in javascript. The main issue before with this was that a javascript error could result in the bot being nonfunctional until someone could ssh into the server that it runs on and edit the script files to fix the problem. With the master interface, however, that isn't a problem anymore, since the master interface can only be configured by hand-editing a configuration file, thereby making it impossible to mess anything up.

The only way to edit the bot's javascript files is through the master interface. The current master interface only supports the IRC protocol. I'm thinking that Marlen_Jackson will connect as MJ_master to ##jzbot for marlen's master interface. Since freenode can be accessed simply by visiting webchat.freenode.net, this allows marlen to be programmed from any location that has an internet connection and a browser.

The master interface has its own set of ops, independent of superops (which are going to be a javascript-specific feature, so that the java code has no concept of ops or anything of the like), that are allowed to program it. These don't need to worry about the whole authname/nickname protocol independence thing since the master interface only supports irc for now.

The master interface is accessed by joining an irc channel in which the master interface has joined (Marlen will join ##jzbot as MJ_master for this purpose) and sending "~!! <mastername> command ..." to the channel. The master interface does not have support for pms at the moment. For example, the command "~!! MJ_master list files" would list all of the scripts currently installed.

The bot is programmed by a number of script files. At startup, the script init.js is run. This script can (and usually does) read the property jzbot.scripts to get an array of strings representing all scripts (including init.js), and can then call jzbot.load(script), passing in the script's name, to load the script. If an error occurs while initializing, it will be sent to the master interface, but everything else will continue to run. If the bot attempts to load the same script more than once, the results are undefined.

On shutdown, the global function shutdown will be called, if it exists. It will be instruction limited (instruction count tbd) so that it can't permanently freeze the bot, or it might be time-limited. The function should take one argument, which will be a boolean indicating whether the shutdown was because of a reload. If it is false, then it means that the bot is shutting down, and true means a reload. All connections to servers will be terminated by the java side of the bot after shutdown returns, so it's not necessary for it to disconnect those if it doesn't want to.

All scripts must currently have names that end with ".js". They must not contain any characters other than letters, numbers, and the hyphen and underscore characters.

The master interface provides these commands:

list: Lists all scripts currently present. This might include scripts that have not yet been installed due to reload having not yet been run. The result will be space delimited.

list functions: Lists all global functions currently loaded. This does not include functions that have been defined in script files but that have not yet been activated by the reload command. TODO: is this needed? It could very easily be written in a script itself, although it might be useful for debugging when a script isn't connecting properly.

export scripts: Exports all script files in a format suitable for passing back in to the import command. This can be used to copy the program from one bot to another, or to back up the bot's program. Until versioning control is implemented in the server, this should frequently be used to back up the bot's program. The exported text will be pastebinned, and the url sent to the user.

import scripts: Imports a file generated by the export command. The sole argument should be a pastebin url that points to the file to import. This should be used with care, as it will overwrite all of the scripts currently loaded into the bot.

get: Gets the script file named, and returns it as a pastebin url.

save: Saves the script file named. The first word is the script file name, and the second word is the pastebin url. If the file already exists, it will be overwritten.

delete: Deletes the script file named.

reload: Reloads the script files. This causes the bot to disconnect from all networks, shut down, start back up, load all script files, and reconnect.

gc: Instructs the bot to garbage collect.

memory: Instructs the bot to print out memory usage.

add scriptop (future): Adds a new scriptop by hostname.

remove scriptop (future): Removes a scriptop by hostname. You can't remove yourself.

revisions (future): prints out the number of revisions that have occured.

export revision (future): Same format as export scripts, but exports what the scripts looked like at the specified revision.

list revisions (future): Lists all revisions in the specified range, which should be greater than 0 and less than the revisions command outputs. For example, "list revisions 20-30". The dates and messages will be printed.

create revision (future): Creates a new revision. This basically means that the working copy will be committed. Conflicts must be manually resolved if any occur. The arguments are the commit message.

download (future): Takes two arguments, a name and a url. The first is the name of a script to create (this refuses to overwrite existing scripts). The second is a url to download a script from. This will download the script at the url specified (a normal url, not a pastebin url) and install it as a script with the specified name.

directory (future): Searches the public script directory for scripts, searching in the name and description.

install (future): Installs a script from the public directory, using the script's name. This method will not overwrite existing scripts; they must be deleted first.



I'm thinking I'll maintain a public script directory that allows for bot owners to download and install publicly-available scripts into their bot. For example, the default init.js (which would be required for just about any other script, see script-convention.txt) would be available at this directory. Other scripts, such as a roulette command and a factoid system, would also be available here.

There would be master interface commands built in for downloading and installing these scripts, and searching the public directory. I might also add a public directory of factoids (or factoid packs), but that would be implemented as a script itself and the master interface wouldn't need to have any knowledge of it.

Scripts on the public directory would have a name and a description, as well as the script itself. A script can then be installed by specifying its name. An optional argument can be given to the install command, which is the name to store the script as (in case the script's name is already the name of a lcoal script).

I'm also thinking scripts might have a short description about themselves which is shown in the search, and then info on the script returns more information on it.

Public directory script names are always prefixed with "pd_", including the default init.js (which is therefore called pd_init.js). Installing the default init.js requires use of the second argument to the install command, like "install pd_init.js init.js".









    
    





























 