In the XMPP JZBot protocol, when things are "escaped" and "unescaped", this refers to a special encoding scheme. Encoding into this scheme involves replacing special characters with escaped equivalents. Each escaped equivalent is made up of an underscore, a name, and another underscore. Here's the list of escaped characters and their corresponding escaped equivalents:

   Character         Escaped Equivalent
   .                 _dot_
   @                 _at_
   <space>           _space_
   #                 _hash_
   _                 _u_
   |                 _pipe_
   !                 _bang_
   *                 _star_
   %                 _percent_
   "                 _dquote_
   '                 _quote_
   /                 _slash_
   \                 _backslash_
   
Decoding is simply the inverse of encoding.

When an XMPP server is specified, this doesn't refer to the actual hostname to connect to; it simply refers to the name of the domain to connect to. This domain's SRV records will be looked up as normal.

It's not currently possible to specify a resource; the resource always defaults to the string "jzbot" (which does prevent multiple bots from connecting at the same time on the same account; this is intentional as this messes up gmail if bots do that). Similarly, the priority always defaults to 1.

The nickname specified on the server to connect to is the name of the account to connect to. For example, if the bot were connecting as marlen@gmail.com, the nickname would be marlen and the hostname would be gmail.com. The port is ignored. However, the bot does not use that nickname, or so it sees, when it joins. From the bot's perspective, the IRC server forcenicks it to the escaped form of its canonical jid, complete with resource name. For example, if the nickname was marlen and the hostname was gmail.com, then the nickname the bot would see once it had connected would be "marlen_at_gmail_dot_com_slash_jzbot".

Each person in a chat room shows up with their nick being their escaped canonical jid instead of their handle. It isn't possible to obtain a user's handle at the moment, although there will hopefully be a custom protocol function for doing so. The bot's handle as seen by other users is its account name (so "marlen" in the examples above).

Modifying the roster can only be done with custom protocol functions. Gmail appears to have no problem with communicating with users not on the account owner's roster, so we shouldn't have any problems with messages needing to be delayed and so on.

None of the chat room moderation commands (such as {kick}, {ban}, and {mode}) are supported at present.

A user's nick as seen by the network is the escaped form of their canonical jid, including their resource (but sending a message to the "invisible" nick made up of just their account name without their resource works too, and results in the message being forwarded as per normal xmpp rules). A user's username is always "user". A user's hostname is the escaped form of just their account jid without their resource name.

When a user that we've subscribed to changes presence, a custom notification, _onpresence, is run.





















