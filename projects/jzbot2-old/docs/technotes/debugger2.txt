The debugger should also be able to handle functions that evaluate alternate code, such as the args function or the (hopefully soon-to-be) store and run functions. So I'm thinking that the window that shows the current execution stack should also show a box or something to indicate groups of items that use the same source code. When an args function is run, it uses separate source code, which is then shown.

How the output should be shown is another matter, though. Maybe, for functions generated by hand instead of generated by the parser, the explanation of the function should be shown instead of the function itself.

So, it seems, then, like the server should send a particular stack frame as the description of the item the frame is at, the text of the frame, the highlight positions and colors that should show up on the text, the frame's current sink, and, if the sink implements ObservableSink, the sink's current data (up to a certain amount which can be set by the debugger, say, 2048 characters).

When debugging a particular factoid (I still haven't determined how you actually tell it that you want to debug a particular factoid), there would be three buttons: step into, step over, step next, and step out. There would also be a continue button, which stops debugging that factoid. Step over and step next are similar, and indeed, they are identical unless the current debug point is an argument in a function. When the debug point is nested directly inside a sequence, they advance to the next item in the sequence. When the debug point is an argument to a function, 



















