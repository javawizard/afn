UPDATE: THIS IS OBSOLETE. IGNORE IT. ALMOST ALL FUNCTIONAL PIECES OF THE BOT ARE BEING MOVED TO FACTOIDS, SO THIS SYSTEM IS NO LONGER NEEDED.

I've decided to redo jzbot. Right now, you implement the command interface to add a new command, and the only protocol supported is irc (and only one server at a time). 

I'm going to make it so that new protocols can be added by implementing the Protocol interface. It's basically in charge of relaying messages, actions, kicks, bans, status updates, network info, and config from jzbot to the actual chat network. 

Then you can add commands by implementing the new command interface, which is different from the old one. It is initialized, and can then register command names that will be delegated to it. It is then invoked for any of these commands, and it is supposed to pass all actions to the command invocation context passed into it, instead of calling those methods on jzbot directly. This will allow commands to import other commands. Exceptions thrown from within a command will cause an exception to be thrown from any methods that happen to be calling that command, and when the exception reaches the top level JZBot will pastebin the stack trace and send it to the sender of the command.

A CommandInvocationContext can be in two modes: standard mode and capture mode. When it is created in one particular mode, it stays in that mode for the rest of its life. When a command invokes another command, the subcommand gets its own context. Standard mode is what the toplevel command's context is in (the toplevel command is the one that was run because a user sent a message with its name in it), and means that any messages or actions sent as output from the command are immediately passed to their parent context, and the toplevel context sends them off to the backing protocol. Capture mode is where the context captures all output sent to it and stores it into a buffer. This is the mode entered when a command is called in capture mode, and can be used to get the output of a command as a string.

A command has two urls that it receives when it is invoked: the source, and the user. The user is the user that sent the message that triggered the command, and the source is either the room that the command was sent to, if it was sent to a room, or the url of that same user, if the command was sent in a pm. 

isOp can be called, passing in a url of a user and a url of a room, and it will return true if the user is a superop, a server op at the room's server, or a standard op at the room. isRoomOp can be called, which returns true if the user is a room op at the room. A room op is a person that is an op according to the server's protocol, such as an irc op or a bzflag administrator. isSuperop can also be called on a user, which returns true if the user is a superop.