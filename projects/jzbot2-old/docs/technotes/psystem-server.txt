This document discusses the workings of the plugin system in terms of the code JZBot uses on its side to load plugins and stuff.

In Storage, there's another StoredList, this one of PersistentKey objects. These represent all of the keys, and associated plugin names, that have been added with "~plugin newkey". PersistentKey contains two fields: key and name. Key is the unique key, and name is the name that should be used for plugins when they authenticate with that key.

When JZBot starts, it reads storage/requested-plugin-port. If it exists, it reads the port number from that. If it doesn't, it randomly generates a port number. It then writes the port number (regardless of whether or not it ended up reading it from requested-plugin-port) to storage/plugin-port. It then opens a TCP server socket on this port, and starts a thread listening for connections.

When a connection is received, the socket reader reads the key that the plugin is trying to log in with. It then goes and first looks up in storage to see if the key specified is a persistent key. If it is, it uses the name matched with it as the name of the plugin. If not, it looks into the temporary key map to find the key, and uses the name in that map. If the key is not present in that map, JZBot rejects the plugin's connection for using an invalid key.

Then, if, in the map of currently-loaded plugins, there is already a plugin with that name, the connection is rejected for trying to connect twice with the same name.

If the connection has gotten this far without being rejected, JZBot adds the plugin's connection to the map of currently-connected plugins and wraps it with an RPCLink. It then checks the notification map to see if there's anything waiting to know when the plugin loads, and notifies it that the plugin has loaded.

There are essentially two ways a plugin can be loaded: synchronously and asynchronously. Synchronous unloading means that something such as a function, a superop, or another plugin requested that a particular plugin be unloaded.

There are two ways a plugin can be loaded: due to a specific request, or due to it being sporadically loaded.