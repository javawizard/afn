Thinking on a NTW replacement that supports lots of additional stuff and is less tied to a particular widget toolkit (NTW is quite heavily influenced by GTK, which makes implementations written for other platforms somewhat difficult to write)...

It should have a handshake that's performed when a connection is established. The client informs the server of the features it supports, and the server has a list of features the app using it needs. If the client doesn't have all the requested features, the server sends them an error message and disconnects them.

If the application tries to use a feature the client has not said it supports, the server framework will throw an exception. This allows the client to require a specific set of features and allow some optional additional ones that will provide extra functionality but that aren't necessary. I might also make future versions of the server able to emulate features missing in some clients; for example, a tabbed pane could be roughly implemented by a vertical box having as its top component a horizontal box containing one toggle button per tab and as its bottom component a container whose contents are switched out as the user clicks on the toggle buttons in turn.

Things like check boxes and radio boxes allow the application to configure whether they change state when the user clicks on them or whether they just send an event back to the user. Same thing with toggle buttons, and most likely same thing with dropdown boxes. That would be useful.

Things like buttons that have an action signal dependent on whether the button is enabled also have a property specifying whether clicks received while the button is disabled will be filtered out on the server side.

State is tracked on the server side. All messages that go over the wire are asynchronous, with the exception of the initial handshake which must proceed in a defined order. This allows for the server-side library to be thread-safe while still allowing applications to block events while they mutate the UI. Event code is called on the thread that receives events from the server. This code can mutate the UI, which would result in sending packets to the client, which is why the protocol must be asynchronous.

