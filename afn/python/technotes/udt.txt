So, I'm coming up with a collection-like thing that is a list, a set, and a dictionary all at the same time.

I basically realized that there are three different aspects of this sort of datatype that lists, sets, and maps can fall into. Those are:

    ordered: whether or not the collection is ordered
    
    duplicates: whether or not the collection allows duplicate items
    
    values: whether or not each item in the collection has an associated value

There are, of course, eight possible combinations of the above aspects. The corresponding datatypes are:

false, false, false: set
false, false, true: map
false, true, false: multiset
false, true, true: multimap
true, false, false: ordered set
true, false, true: ordered map
true, true, false: ordered multiset (also known as a list)
true, true, true: ordered multimap

So, the operations we need...

We need things to add a new item to the collection.

And we need a bunch of different variants of this sort of operation...

We need a variant that adds the item to the end of the collection, and one that allows specifying an index to add the item at, and one that allows replacing the item at a particular index. Only the former would function correctly on an unordered collection; the behavior of the others is undefined.

We also need a variant that gets rid of an existing conflicting value in the case of a unique collection, instead of refusing to add the new value.

Then we need a variant that accepts a value.

So that gives us 12 different methods.

Wow.

I think I'll run with it, though, and see how it goes.

I need to come up with names for the methods, though.

So, with List, the add-at-the-end and add-at-an-index methods are called add, while the set-an-index-to-an-item method is called set.

So we could have add and set.

Then we could have additional parameters for the value.

So then what do we want to name the ones that replace existing values instead?

Maybe put and replace.

Let's try that.

Ok, that worked.

So now, methods for removing things...

We need a variant for removing a particular item, an item at a particular index, an item with a certain corresponding value, or any item.

We need a variant for removing the first such item, the last such item, or all such items.

And then, of course, we need a variant for clearing out the entire thing.

It doesn't make sense, however, to have first/last/all variants when removing by index, so we don't need to worry about that.

So we have 10 combinations then.

Let's try that.

Ok, that worked.

So now, methods for getting things...

Well, we need a size method.

Let's add that.

Done.

So now, collections need to be iterable. And iterating over them yields their items, in order for ordered collections or in no particular order for unordered collections.















