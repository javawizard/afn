// Auto-generated by Alexander Boyd (a.k.a. javawizard, jcp)'s simpleproto.py
package afn.libautobus.protocol;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.io.IOException;

public class Protobuf
{
    public static interface GeneratedMessage<E extends GeneratedMessage<E>>
    {
        public byte[] serialize();
        
        public E deserialize(byte[] bytes);
        
        public <T> T get(String name);
        
        public void set(String name, Object value);
        
        public Class<?> getInstanceClassForField(String fieldName);
    }
    
    protected static int readVarint(DataInputStream in) throws IOException
    {
        int value = 0;
        int i;
        int shift = 0;
        while (((i = in.read()) & 0x80) > 0)
        {
            value |= (i & 0x7F) << (shift * 7);
            shift += 1;
        }
        value |= i << (shift * 7);
        return value;
    }
    
    protected static void writeVarint(DataOutputStream out, int value) throws IOException
    {
        if (value < 0)
            throw new RuntimeException("Negative varints are not allowed.");
        while (value > 0)
        {
            int i = value & 0x7F;
            value >>= 7;
            if (value > 0)
                i |= 0x80;
            out.write(i);
        }
    }
    
    protected static byte[] reverseBytes(byte[] in)
    {
        byte[] out = new byte[in.length];
        for (int i = 0; i < in.length; i++)
        {
            out[(in.length - i) - 1] = in[i];
        }
        return out;
    }
    
    protected static byte[] readReversedBytes(DataInputStream in, int length)
            throws IOException
    {
        byte[] bytes = new byte[length];
        in.readFully(bytes);
        return reverseBytes(bytes);
    }
    
    protected static void writeReversedBytes(DataOutputStream out, byte[] bytes)
            throws IOException
    {
        bytes = reverseBytes(bytes);
        out.write(bytes);
    }
    
    protected static DataInputStream readReversedToStream(DataInputStream in, int length)
            throws IOException
    {
        return new DataInputStream(new ByteArrayInputStream(readReversedBytes(in, length)));
    }
    
    protected static int readInt(DataInputStream in) throws IOException
    {
        return readReversedToStream(in, 4).readInt();
    }
    
    protected static long readLong(DataInputStream in) throws IOException
    {
        return readReversedToStream(in, 8).readLong();
    }
    
    protected static double readDouble(DataInputStream in) throws IOException
    {
        return readReversedToStream(in, 8).readDouble();
    }
    
    protected static void writeInt(DataOutputStream out, int value) throws IOException
    {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        new DataOutputStream(baos).writeInt(value);
        writeReversedBytes(out, baos.toByteArray());
    }
    
    protected static void writeLong(DataOutputStream out, long value) throws IOException
    {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        new DataOutputStream(baos).writeLong(value);
        writeReversedBytes(out, baos.toByteArray());
    }
    
    protected static void writeDouble(DataOutputStream out, double value)
            throws IOException
    {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        new DataOutputStream(baos).writeDouble(value);
        writeReversedBytes(out, baos.toByteArray());
    }
    
    protected static void writeFieldNumber(DataOutputStream out, int fieldNumber,
            int wireType) throws IOException
    {
        writeVarint(out, (fieldNumber << 3) | wireType);
    }
    
    protected static int readFieldNumber(DataInputStream in) throws IOException
    {
        return readVarint(in) >> 3;
    }
    
    protected static byte[] readVarBytes(DataInputStream in) throws IOException
    {
        byte[] bytes = new byte[readVarint(in)];
        in.readFully(bytes);
        return bytes;
    }
    
    protected static String readString(DataInputStream in) throws IOException
    {
        return new String(readVarBytes(in));
    }
    
    protected static void writeVarBytes(DataOutputStream out, byte[] bytes)
            throws IOException
    {
        writeVarint(out, bytes.length);
        out.write(bytes);
    }
    
    protected static void writeString(DataOutputStream out, String string)
            throws IOException
    {
        writeVarBytes(out, string.getBytes());
    }
    
    public static class MapEntry implements GeneratedMessage<MapEntry>
    {
        public Instance key = null;
        public Instance value = null;
        
        public MapEntry setKey(Instance key)
        {
            this.key = key;
            return this;
        }
        
        public MapEntry setValue(Instance value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.key == null)
                throw new RuntimeException("Field 'key' (protobuf message field "
                    + "'key') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.key = newValue;
                }
                else if (fieldNumber == 2)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.key != null)
            {
                Instance currentValue = key;
                writeFieldNumber(out, 1, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value != null)
            {
                Instance currentValue = value;
                writeFieldNumber(out, 2, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public MapEntry deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("key", Instance.class);
            _typeMap.put("value", Instance.class);
        }
    }
    
    public static class StructEntry implements GeneratedMessage<StructEntry>
    {
        public String key = null;
        public Instance value = null;
        
        public StructEntry setKey(String key)
        {
            this.key = key;
            return this;
        }
        
        public StructEntry setValue(Instance value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.key == null)
                throw new RuntimeException("Field 'key' (protobuf message field "
                    + "'key') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.key = newValue;
                }
                else if (fieldNumber == 2)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.key != null)
            {
                String currentValue = key;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.value != null)
            {
                Instance currentValue = value;
                writeFieldNumber(out, 2, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public StructEntry deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("key", String.class);
            _typeMap.put("value", Instance.class);
        }
    }
    
    public static class Instance implements GeneratedMessage<Instance>
    {
        public IntegerInstance value1 = null;
        public LongInstance value2 = null;
        public DoubleInstance value3 = null;
        public StringInstance value4 = null;
        public TimestampInstance value5 = null;
        public NullInstance value6 = null;
        public ListInstance value7 = null;
        public MapInstance value8 = null;
        public StructInstance value9 = null;
        public ExceptionInstance value10 = null;
        public BoolInstance value11 = null;
        public String valueN = null;
        
        public Instance setValue1(IntegerInstance value1)
        {
            this.value1 = value1;
            return this;
        }
        
        public Instance setValue2(LongInstance value2)
        {
            this.value2 = value2;
            return this;
        }
        
        public Instance setValue3(DoubleInstance value3)
        {
            this.value3 = value3;
            return this;
        }
        
        public Instance setValue4(StringInstance value4)
        {
            this.value4 = value4;
            return this;
        }
        
        public Instance setValue5(TimestampInstance value5)
        {
            this.value5 = value5;
            return this;
        }
        
        public Instance setValue6(NullInstance value6)
        {
            this.value6 = value6;
            return this;
        }
        
        public Instance setValue7(ListInstance value7)
        {
            this.value7 = value7;
            return this;
        }
        
        public Instance setValue8(MapInstance value8)
        {
            this.value8 = value8;
            return this;
        }
        
        public Instance setValue9(StructInstance value9)
        {
            this.value9 = value9;
            return this;
        }
        
        public Instance setValue10(ExceptionInstance value10)
        {
            this.value10 = value10;
            return this;
        }
        
        public Instance setValue11(BoolInstance value11)
        {
            this.value11 = value11;
            return this;
        }
        
        public Instance setValueN(String valueN)
        {
            this.valueN = valueN;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.valueN == null)
                throw new RuntimeException("Field 'valueN' (protobuf message field "
                    + "'value_n') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    IntegerInstance newValue = new IntegerInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value1 = newValue;
                }
                else if (fieldNumber == 2)
                {
                    LongInstance newValue = new LongInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value2 = newValue;
                }
                else if (fieldNumber == 3)
                {
                    DoubleInstance newValue = new DoubleInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value3 = newValue;
                }
                else if (fieldNumber == 4)
                {
                    StringInstance newValue = new StringInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value4 = newValue;
                }
                else if (fieldNumber == 5)
                {
                    TimestampInstance newValue = new TimestampInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value5 = newValue;
                }
                else if (fieldNumber == 6)
                {
                    NullInstance newValue = new NullInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value6 = newValue;
                }
                else if (fieldNumber == 7)
                {
                    ListInstance newValue = new ListInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value7 = newValue;
                }
                else if (fieldNumber == 8)
                {
                    MapInstance newValue = new MapInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value8 = newValue;
                }
                else if (fieldNumber == 9)
                {
                    StructInstance newValue = new StructInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value9 = newValue;
                }
                else if (fieldNumber == 10)
                {
                    ExceptionInstance newValue = new ExceptionInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value10 = newValue;
                }
                else if (fieldNumber == 11)
                {
                    BoolInstance newValue = new BoolInstance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value11 = newValue;
                }
                else if (fieldNumber == 100)
                {
                    String newValue = readString(in);
                    this.valueN = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value1 != null)
            {
                IntegerInstance currentValue = value1;
                writeFieldNumber(out, 1, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value2 != null)
            {
                LongInstance currentValue = value2;
                writeFieldNumber(out, 2, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value3 != null)
            {
                DoubleInstance currentValue = value3;
                writeFieldNumber(out, 3, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value4 != null)
            {
                StringInstance currentValue = value4;
                writeFieldNumber(out, 4, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value5 != null)
            {
                TimestampInstance currentValue = value5;
                writeFieldNumber(out, 5, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value6 != null)
            {
                NullInstance currentValue = value6;
                writeFieldNumber(out, 6, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value7 != null)
            {
                ListInstance currentValue = value7;
                writeFieldNumber(out, 7, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value8 != null)
            {
                MapInstance currentValue = value8;
                writeFieldNumber(out, 8, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value9 != null)
            {
                StructInstance currentValue = value9;
                writeFieldNumber(out, 9, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value10 != null)
            {
                ExceptionInstance currentValue = value10;
                writeFieldNumber(out, 10, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value11 != null)
            {
                BoolInstance currentValue = value11;
                writeFieldNumber(out, 11, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.valueN != null)
            {
                String currentValue = valueN;
                writeFieldNumber(out, 100, 2);
                writeString(out, currentValue);
            }
        }
        
        public Instance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value1", IntegerInstance.class);
            _typeMap.put("value2", LongInstance.class);
            _typeMap.put("value3", DoubleInstance.class);
            _typeMap.put("value4", StringInstance.class);
            _typeMap.put("value5", TimestampInstance.class);
            _typeMap.put("value6", NullInstance.class);
            _typeMap.put("value7", ListInstance.class);
            _typeMap.put("value8", MapInstance.class);
            _typeMap.put("value9", StructInstance.class);
            _typeMap.put("value10", ExceptionInstance.class);
            _typeMap.put("value11", BoolInstance.class);
            _typeMap.put("valueN", String.class);
        }
    }
    
    public static class IntegerInstance implements GeneratedMessage<IntegerInstance>
    {
        public Integer value = null;
        
        public IntegerInstance setValue(Integer value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Integer newValue = readInt(in);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                Integer currentValue = value;
                writeFieldNumber(out, 1, 5);
                writeInt(out, currentValue);
            }
        }
        
        public IntegerInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", Integer.class);
        }
    }
    
    public static class LongInstance implements GeneratedMessage<LongInstance>
    {
        public Long value = null;
        
        public LongInstance setValue(Long value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Long newValue = readLong(in);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                Long currentValue = value;
                writeFieldNumber(out, 1, 1);
                writeLong(out, currentValue);
            }
        }
        
        public LongInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", Long.class);
        }
    }
    
    public static class DoubleInstance implements GeneratedMessage<DoubleInstance>
    {
        public Double value = null;
        
        public DoubleInstance setValue(Double value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Double newValue = readDouble(in);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                Double currentValue = value;
                writeFieldNumber(out, 1, 1);
                writeDouble(out, currentValue);
            }
        }
        
        public DoubleInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", Double.class);
        }
    }
    
    public static class StringInstance implements GeneratedMessage<StringInstance>
    {
        public String value = null;
        
        public StringInstance setValue(String value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                String currentValue = value;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
        }
        
        public StringInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", String.class);
        }
    }
    
    public static class TimestampInstance implements GeneratedMessage<TimestampInstance>
    {
        public Integer year = null;
        public Integer month = null;
        public Integer day = null;
        public Integer hour = null;
        public Integer minute = null;
        public Integer second = null;
        public Integer millisecond = null;
        
        public TimestampInstance setYear(Integer year)
        {
            this.year = year;
            return this;
        }
        
        public TimestampInstance setMonth(Integer month)
        {
            this.month = month;
            return this;
        }
        
        public TimestampInstance setDay(Integer day)
        {
            this.day = day;
            return this;
        }
        
        public TimestampInstance setHour(Integer hour)
        {
            this.hour = hour;
            return this;
        }
        
        public TimestampInstance setMinute(Integer minute)
        {
            this.minute = minute;
            return this;
        }
        
        public TimestampInstance setSecond(Integer second)
        {
            this.second = second;
            return this;
        }
        
        public TimestampInstance setMillisecond(Integer millisecond)
        {
            this.millisecond = millisecond;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.year == null)
                throw new RuntimeException("Field 'year' (protobuf message field "
                    + "'year') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.month == null)
                throw new RuntimeException("Field 'month' (protobuf message field "
                    + "'month') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.day == null)
                throw new RuntimeException("Field 'day' (protobuf message field "
                    + "'day') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.hour == null)
                throw new RuntimeException("Field 'hour' (protobuf message field "
                    + "'hour') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.minute == null)
                throw new RuntimeException("Field 'minute' (protobuf message field "
                    + "'minute') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.second == null)
                throw new RuntimeException("Field 'second' (protobuf message field "
                    + "'second') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.millisecond == null)
                throw new RuntimeException("Field 'millisecond' (protobuf message field "
                    + "'millisecond') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Integer newValue = readInt(in);
                    this.year = newValue;
                }
                else if (fieldNumber == 2)
                {
                    Integer newValue = readInt(in);
                    this.month = newValue;
                }
                else if (fieldNumber == 3)
                {
                    Integer newValue = readInt(in);
                    this.day = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Integer newValue = readInt(in);
                    this.hour = newValue;
                }
                else if (fieldNumber == 5)
                {
                    Integer newValue = readInt(in);
                    this.minute = newValue;
                }
                else if (fieldNumber == 6)
                {
                    Integer newValue = readInt(in);
                    this.second = newValue;
                }
                else if (fieldNumber == 7)
                {
                    Integer newValue = readInt(in);
                    this.millisecond = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.year != null)
            {
                Integer currentValue = year;
                writeFieldNumber(out, 1, 5);
                writeInt(out, currentValue);
            }
            if (this.month != null)
            {
                Integer currentValue = month;
                writeFieldNumber(out, 2, 5);
                writeInt(out, currentValue);
            }
            if (this.day != null)
            {
                Integer currentValue = day;
                writeFieldNumber(out, 3, 5);
                writeInt(out, currentValue);
            }
            if (this.hour != null)
            {
                Integer currentValue = hour;
                writeFieldNumber(out, 4, 5);
                writeInt(out, currentValue);
            }
            if (this.minute != null)
            {
                Integer currentValue = minute;
                writeFieldNumber(out, 5, 5);
                writeInt(out, currentValue);
            }
            if (this.second != null)
            {
                Integer currentValue = second;
                writeFieldNumber(out, 6, 5);
                writeInt(out, currentValue);
            }
            if (this.millisecond != null)
            {
                Integer currentValue = millisecond;
                writeFieldNumber(out, 7, 5);
                writeInt(out, currentValue);
            }
        }
        
        public TimestampInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("year", Integer.class);
            _typeMap.put("month", Integer.class);
            _typeMap.put("day", Integer.class);
            _typeMap.put("hour", Integer.class);
            _typeMap.put("minute", Integer.class);
            _typeMap.put("second", Integer.class);
            _typeMap.put("millisecond", Integer.class);
        }
    }
    
    public static class NullInstance implements GeneratedMessage<NullInstance>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public NullInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class ListInstance implements GeneratedMessage<ListInstance>
    {
        public List<Instance> value = new ArrayList<Instance>();
        
        public ListInstance setValue(List<Instance> value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                for (Instance currentValue : value)
                {
                    writeFieldNumber(out, 1, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public ListInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", Instance.class);
        }
    }
    
    public static class MapInstance implements GeneratedMessage<MapInstance>
    {
        public List<MapEntry> value = new ArrayList<MapEntry>();
        
        public MapInstance setValue(List<MapEntry> value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    MapEntry newValue = new MapEntry();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                for (MapEntry currentValue : value)
                {
                    writeFieldNumber(out, 1, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public MapInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", MapEntry.class);
        }
    }
    
    public static class StructInstance implements GeneratedMessage<StructInstance>
    {
        public String name = null;
        public List<StructEntry> value = new ArrayList<StructEntry>();
        
        public StructInstance setName(String name)
        {
            this.name = name;
            return this;
        }
        
        public StructInstance setValue(List<StructEntry> value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.name == null)
                throw new RuntimeException("Field 'name' (protobuf message field "
                    + "'name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.name = newValue;
                }
                else if (fieldNumber == 2)
                {
                    StructEntry newValue = new StructEntry();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.name != null)
            {
                String currentValue = name;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.value != null)
            {
                for (StructEntry currentValue : value)
                {
                    writeFieldNumber(out, 2, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public StructInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("name", String.class);
            _typeMap.put("value", StructEntry.class);
        }
    }
    
    public static class ExceptionInstance implements GeneratedMessage<ExceptionInstance>
    {
        public String text = null;
        
        public ExceptionInstance setText(String text)
        {
            this.text = text;
            return this;
        }
        
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.text = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.text != null)
            {
                String currentValue = text;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
        }
        
        public ExceptionInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("text", String.class);
        }
    }
    
    public static class BoolInstance implements GeneratedMessage<BoolInstance>
    {
        public Boolean value = null;
        
        public BoolInstance setValue(Boolean value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Boolean newValue = in.readBoolean();
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.value != null)
            {
                Boolean currentValue = value;
                writeFieldNumber(out, 1, 0);
                out.writeBoolean(currentValue);
            }
        }
        
        public BoolInstance deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("value", Boolean.class);
        }
    }
    
    public static class Message implements GeneratedMessage<Message>
    {
        public Integer messageType = null;
        public Long messageId = null;
        public RegisterInterfaceCommand value2 = null;
        public RegisterInterfaceResponse value3 = null;
        public RegisterFunctionCommand value4 = null;
        public RegisterFunctionResponse value5 = null;
        public CallFunctionCommand value6 = null;
        public CallFunctionResponse value7 = null;
        public RunFunctionCommand value8 = null;
        public RunFunctionResponse value9 = null;
        public ErrorResponse value10 = null;
        public RegisterEventCommand value11 = null;
        public RegisterEventResponse value12 = null;
        public RegisterListenerCommand value13 = null;
        public RegisterListenerCommand value14 = null;
        public DeregisterListenerCommand value15 = null;
        public DeregisterListenerResponse value16 = null;
        public FireEventCommand value17 = null;
        public RegisterObjectCommand value19 = null;
        public RegisterObjectResponse value20 = null;
        public WatchObjectCommand value21 = null;
        public WatchObjectResponse value22 = null;
        public UnwatchObjectCommand value23 = null;
        public UnwatchObjectCommand value24 = null;
        public SetObjectCommand value25 = null;
        public String valueN = null;
        
        public Message setMessageType(Integer messageType)
        {
            this.messageType = messageType;
            return this;
        }
        
        public Message setMessageId(Long messageId)
        {
            this.messageId = messageId;
            return this;
        }
        
        public Message setValue2(RegisterInterfaceCommand value2)
        {
            this.value2 = value2;
            return this;
        }
        
        public Message setValue3(RegisterInterfaceResponse value3)
        {
            this.value3 = value3;
            return this;
        }
        
        public Message setValue4(RegisterFunctionCommand value4)
        {
            this.value4 = value4;
            return this;
        }
        
        public Message setValue5(RegisterFunctionResponse value5)
        {
            this.value5 = value5;
            return this;
        }
        
        public Message setValue6(CallFunctionCommand value6)
        {
            this.value6 = value6;
            return this;
        }
        
        public Message setValue7(CallFunctionResponse value7)
        {
            this.value7 = value7;
            return this;
        }
        
        public Message setValue8(RunFunctionCommand value8)
        {
            this.value8 = value8;
            return this;
        }
        
        public Message setValue9(RunFunctionResponse value9)
        {
            this.value9 = value9;
            return this;
        }
        
        public Message setValue10(ErrorResponse value10)
        {
            this.value10 = value10;
            return this;
        }
        
        public Message setValue11(RegisterEventCommand value11)
        {
            this.value11 = value11;
            return this;
        }
        
        public Message setValue12(RegisterEventResponse value12)
        {
            this.value12 = value12;
            return this;
        }
        
        public Message setValue13(RegisterListenerCommand value13)
        {
            this.value13 = value13;
            return this;
        }
        
        public Message setValue14(RegisterListenerCommand value14)
        {
            this.value14 = value14;
            return this;
        }
        
        public Message setValue15(DeregisterListenerCommand value15)
        {
            this.value15 = value15;
            return this;
        }
        
        public Message setValue16(DeregisterListenerResponse value16)
        {
            this.value16 = value16;
            return this;
        }
        
        public Message setValue17(FireEventCommand value17)
        {
            this.value17 = value17;
            return this;
        }
        
        public Message setValue19(RegisterObjectCommand value19)
        {
            this.value19 = value19;
            return this;
        }
        
        public Message setValue20(RegisterObjectResponse value20)
        {
            this.value20 = value20;
            return this;
        }
        
        public Message setValue21(WatchObjectCommand value21)
        {
            this.value21 = value21;
            return this;
        }
        
        public Message setValue22(WatchObjectResponse value22)
        {
            this.value22 = value22;
            return this;
        }
        
        public Message setValue23(UnwatchObjectCommand value23)
        {
            this.value23 = value23;
            return this;
        }
        
        public Message setValue24(UnwatchObjectCommand value24)
        {
            this.value24 = value24;
            return this;
        }
        
        public Message setValue25(SetObjectCommand value25)
        {
            this.value25 = value25;
            return this;
        }
        
        public Message setValueN(String valueN)
        {
            this.valueN = valueN;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.messageType == null)
                throw new RuntimeException("Field 'messageType' (protobuf message field "
                    + "'message_type') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.messageId == null)
                throw new RuntimeException("Field 'messageId' (protobuf message field "
                    + "'message_id') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.valueN == null)
                throw new RuntimeException("Field 'valueN' (protobuf message field "
                    + "'value_n') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Integer newValue = readInt(in);
                    this.messageType = newValue;
                }
                else if (fieldNumber == 60)
                {
                    Long newValue = readLong(in);
                    this.messageId = newValue;
                }
                else if (fieldNumber == 2)
                {
                    RegisterInterfaceCommand newValue = new RegisterInterfaceCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value2 = newValue;
                }
                else if (fieldNumber == 3)
                {
                    RegisterInterfaceResponse newValue = new RegisterInterfaceResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value3 = newValue;
                }
                else if (fieldNumber == 4)
                {
                    RegisterFunctionCommand newValue = new RegisterFunctionCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value4 = newValue;
                }
                else if (fieldNumber == 5)
                {
                    RegisterFunctionResponse newValue = new RegisterFunctionResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value5 = newValue;
                }
                else if (fieldNumber == 6)
                {
                    CallFunctionCommand newValue = new CallFunctionCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value6 = newValue;
                }
                else if (fieldNumber == 7)
                {
                    CallFunctionResponse newValue = new CallFunctionResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value7 = newValue;
                }
                else if (fieldNumber == 8)
                {
                    RunFunctionCommand newValue = new RunFunctionCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value8 = newValue;
                }
                else if (fieldNumber == 9)
                {
                    RunFunctionResponse newValue = new RunFunctionResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value9 = newValue;
                }
                else if (fieldNumber == 10)
                {
                    ErrorResponse newValue = new ErrorResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value10 = newValue;
                }
                else if (fieldNumber == 11)
                {
                    RegisterEventCommand newValue = new RegisterEventCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value11 = newValue;
                }
                else if (fieldNumber == 12)
                {
                    RegisterEventResponse newValue = new RegisterEventResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value12 = newValue;
                }
                else if (fieldNumber == 13)
                {
                    RegisterListenerCommand newValue = new RegisterListenerCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value13 = newValue;
                }
                else if (fieldNumber == 14)
                {
                    RegisterListenerCommand newValue = new RegisterListenerCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value14 = newValue;
                }
                else if (fieldNumber == 15)
                {
                    DeregisterListenerCommand newValue = new DeregisterListenerCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value15 = newValue;
                }
                else if (fieldNumber == 16)
                {
                    DeregisterListenerResponse newValue = new DeregisterListenerResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value16 = newValue;
                }
                else if (fieldNumber == 17)
                {
                    FireEventCommand newValue = new FireEventCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value17 = newValue;
                }
                else if (fieldNumber == 19)
                {
                    RegisterObjectCommand newValue = new RegisterObjectCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value19 = newValue;
                }
                else if (fieldNumber == 20)
                {
                    RegisterObjectResponse newValue = new RegisterObjectResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value20 = newValue;
                }
                else if (fieldNumber == 21)
                {
                    WatchObjectCommand newValue = new WatchObjectCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value21 = newValue;
                }
                else if (fieldNumber == 22)
                {
                    WatchObjectResponse newValue = new WatchObjectResponse();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value22 = newValue;
                }
                else if (fieldNumber == 23)
                {
                    UnwatchObjectCommand newValue = new UnwatchObjectCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value23 = newValue;
                }
                else if (fieldNumber == 24)
                {
                    UnwatchObjectCommand newValue = new UnwatchObjectCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value24 = newValue;
                }
                else if (fieldNumber == 25)
                {
                    SetObjectCommand newValue = new SetObjectCommand();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value25 = newValue;
                }
                else if (fieldNumber == 100)
                {
                    String newValue = readString(in);
                    this.valueN = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.messageType != null)
            {
                Integer currentValue = messageType;
                writeFieldNumber(out, 1, 5);
                writeInt(out, currentValue);
            }
            if (this.messageId != null)
            {
                Long currentValue = messageId;
                writeFieldNumber(out, 60, 1);
                writeLong(out, currentValue);
            }
            if (this.value2 != null)
            {
                RegisterInterfaceCommand currentValue = value2;
                writeFieldNumber(out, 2, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value3 != null)
            {
                RegisterInterfaceResponse currentValue = value3;
                writeFieldNumber(out, 3, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value4 != null)
            {
                RegisterFunctionCommand currentValue = value4;
                writeFieldNumber(out, 4, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value5 != null)
            {
                RegisterFunctionResponse currentValue = value5;
                writeFieldNumber(out, 5, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value6 != null)
            {
                CallFunctionCommand currentValue = value6;
                writeFieldNumber(out, 6, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value7 != null)
            {
                CallFunctionResponse currentValue = value7;
                writeFieldNumber(out, 7, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value8 != null)
            {
                RunFunctionCommand currentValue = value8;
                writeFieldNumber(out, 8, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value9 != null)
            {
                RunFunctionResponse currentValue = value9;
                writeFieldNumber(out, 9, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value10 != null)
            {
                ErrorResponse currentValue = value10;
                writeFieldNumber(out, 10, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value11 != null)
            {
                RegisterEventCommand currentValue = value11;
                writeFieldNumber(out, 11, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value12 != null)
            {
                RegisterEventResponse currentValue = value12;
                writeFieldNumber(out, 12, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value13 != null)
            {
                RegisterListenerCommand currentValue = value13;
                writeFieldNumber(out, 13, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value14 != null)
            {
                RegisterListenerCommand currentValue = value14;
                writeFieldNumber(out, 14, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value15 != null)
            {
                DeregisterListenerCommand currentValue = value15;
                writeFieldNumber(out, 15, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value16 != null)
            {
                DeregisterListenerResponse currentValue = value16;
                writeFieldNumber(out, 16, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value17 != null)
            {
                FireEventCommand currentValue = value17;
                writeFieldNumber(out, 17, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value19 != null)
            {
                RegisterObjectCommand currentValue = value19;
                writeFieldNumber(out, 19, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value20 != null)
            {
                RegisterObjectResponse currentValue = value20;
                writeFieldNumber(out, 20, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value21 != null)
            {
                WatchObjectCommand currentValue = value21;
                writeFieldNumber(out, 21, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value22 != null)
            {
                WatchObjectResponse currentValue = value22;
                writeFieldNumber(out, 22, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value23 != null)
            {
                UnwatchObjectCommand currentValue = value23;
                writeFieldNumber(out, 23, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value24 != null)
            {
                UnwatchObjectCommand currentValue = value24;
                writeFieldNumber(out, 24, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.value25 != null)
            {
                SetObjectCommand currentValue = value25;
                writeFieldNumber(out, 25, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
            if (this.valueN != null)
            {
                String currentValue = valueN;
                writeFieldNumber(out, 100, 2);
                writeString(out, currentValue);
            }
        }
        
        public Message deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("messageType", Integer.class);
            _typeMap.put("messageId", Long.class);
            _typeMap.put("value2", RegisterInterfaceCommand.class);
            _typeMap.put("value3", RegisterInterfaceResponse.class);
            _typeMap.put("value4", RegisterFunctionCommand.class);
            _typeMap.put("value5", RegisterFunctionResponse.class);
            _typeMap.put("value6", CallFunctionCommand.class);
            _typeMap.put("value7", CallFunctionResponse.class);
            _typeMap.put("value8", RunFunctionCommand.class);
            _typeMap.put("value9", RunFunctionResponse.class);
            _typeMap.put("value10", ErrorResponse.class);
            _typeMap.put("value11", RegisterEventCommand.class);
            _typeMap.put("value12", RegisterEventResponse.class);
            _typeMap.put("value13", RegisterListenerCommand.class);
            _typeMap.put("value14", RegisterListenerCommand.class);
            _typeMap.put("value15", DeregisterListenerCommand.class);
            _typeMap.put("value16", DeregisterListenerResponse.class);
            _typeMap.put("value17", FireEventCommand.class);
            _typeMap.put("value19", RegisterObjectCommand.class);
            _typeMap.put("value20", RegisterObjectResponse.class);
            _typeMap.put("value21", WatchObjectCommand.class);
            _typeMap.put("value22", WatchObjectResponse.class);
            _typeMap.put("value23", UnwatchObjectCommand.class);
            _typeMap.put("value24", UnwatchObjectCommand.class);
            _typeMap.put("value25", SetObjectCommand.class);
            _typeMap.put("valueN", String.class);
        }
    }
    
    public static class RegisterInterfaceCommand implements
            GeneratedMessage<RegisterInterfaceCommand>
    {
        public String name = null;
        public String doc = null;
        
        public RegisterInterfaceCommand setName(String name)
        {
            this.name = name;
            return this;
        }
        
        public RegisterInterfaceCommand setDoc(String doc)
        {
            this.doc = doc;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.name == null)
                throw new RuntimeException("Field 'name' (protobuf message field "
                    + "'name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.name = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.doc = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.name != null)
            {
                String currentValue = name;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.doc != null)
            {
                String currentValue = doc;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
        }
        
        public RegisterInterfaceCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("name", String.class);
            _typeMap.put("doc", String.class);
        }
    }
    
    public static class RegisterInterfaceResponse implements
            GeneratedMessage<RegisterInterfaceResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public RegisterInterfaceResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class RegisterFunctionCommand implements
            GeneratedMessage<RegisterFunctionCommand>
    {
        public String interfaceName = null;
        public String name = null;
        public String doc = null;
        
        public RegisterFunctionCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public RegisterFunctionCommand setName(String name)
        {
            this.name = name;
            return this;
        }
        
        public RegisterFunctionCommand setDoc(String doc)
        {
            this.doc = doc;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.name == null)
                throw new RuntimeException("Field 'name' (protobuf message field "
                    + "'name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.name = newValue;
                }
                else if (fieldNumber == 4)
                {
                    String newValue = readString(in);
                    this.doc = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.name != null)
            {
                String currentValue = name;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
            if (this.doc != null)
            {
                String currentValue = doc;
                writeFieldNumber(out, 4, 2);
                writeString(out, currentValue);
            }
        }
        
        public RegisterFunctionCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("name", String.class);
            _typeMap.put("doc", String.class);
        }
    }
    
    public static class RegisterFunctionResponse implements
            GeneratedMessage<RegisterFunctionResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public RegisterFunctionResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class CallFunctionCommand implements
            GeneratedMessage<CallFunctionCommand>
    {
        public String interfaceName = null;
        public String function = null;
        public List<Instance> arguments = new ArrayList<Instance>();
        
        public CallFunctionCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public CallFunctionCommand setFunction(String function)
        {
            this.function = function;
            return this;
        }
        
        public CallFunctionCommand setArguments(List<Instance> arguments)
        {
            this.arguments = arguments;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.function == null)
                throw new RuntimeException("Field 'function' (protobuf message field "
                    + "'function') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.function = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.arguments.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.function != null)
            {
                String currentValue = function;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
            if (this.arguments != null)
            {
                for (Instance currentValue : arguments)
                {
                    writeFieldNumber(out, 4, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public CallFunctionCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("function", String.class);
            _typeMap.put("arguments", Instance.class);
        }
    }
    
    public static class CallFunctionResponse implements
            GeneratedMessage<CallFunctionResponse>
    {
        public Instance returnValue = null;
        
        public CallFunctionResponse setReturnValue(Instance returnValue)
        {
            this.returnValue = returnValue;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.returnValue == null)
                throw new RuntimeException("Field 'returnValue' (protobuf message field "
                    + "'return_value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.returnValue = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.returnValue != null)
            {
                Instance currentValue = returnValue;
                writeFieldNumber(out, 1, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public CallFunctionResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("returnValue", Instance.class);
        }
    }
    
    public static class RunFunctionCommand implements GeneratedMessage<RunFunctionCommand>
    {
        public String interfaceName = null;
        public String function = null;
        public List<Instance> arguments = new ArrayList<Instance>();
        
        public RunFunctionCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public RunFunctionCommand setFunction(String function)
        {
            this.function = function;
            return this;
        }
        
        public RunFunctionCommand setArguments(List<Instance> arguments)
        {
            this.arguments = arguments;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.function == null)
                throw new RuntimeException("Field 'function' (protobuf message field "
                    + "'function') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.function = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.arguments.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.function != null)
            {
                String currentValue = function;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
            if (this.arguments != null)
            {
                for (Instance currentValue : arguments)
                {
                    writeFieldNumber(out, 4, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public RunFunctionCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("function", String.class);
            _typeMap.put("arguments", Instance.class);
        }
    }
    
    public static class RunFunctionResponse implements
            GeneratedMessage<RunFunctionResponse>
    {
        public Instance returnValue = null;
        
        public RunFunctionResponse setReturnValue(Instance returnValue)
        {
            this.returnValue = returnValue;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.returnValue == null)
                throw new RuntimeException("Field 'returnValue' (protobuf message field "
                    + "'return_value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.returnValue = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.returnValue != null)
            {
                Instance currentValue = returnValue;
                writeFieldNumber(out, 1, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public RunFunctionResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("returnValue", Instance.class);
        }
    }
    
    public static class ErrorResponse implements GeneratedMessage<ErrorResponse>
    {
        public String text = null;
        
        public ErrorResponse setText(String text)
        {
            this.text = text;
            return this;
        }
        
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.text = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.text != null)
            {
                String currentValue = text;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
        }
        
        public ErrorResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("text", String.class);
        }
    }
    
    public static class RegisterEventCommand implements
            GeneratedMessage<RegisterEventCommand>
    {
        public String interfaceName = null;
        public String eventName = null;
        public String doc = null;
        
        public RegisterEventCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public RegisterEventCommand setEventName(String eventName)
        {
            this.eventName = eventName;
            return this;
        }
        
        public RegisterEventCommand setDoc(String doc)
        {
            this.doc = doc;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.eventName == null)
                throw new RuntimeException("Field 'eventName' (protobuf message field "
                    + "'event_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.eventName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.doc = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.eventName != null)
            {
                String currentValue = eventName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.doc != null)
            {
                String currentValue = doc;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
        }
        
        public RegisterEventCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("eventName", String.class);
            _typeMap.put("doc", String.class);
        }
    }
    
    public static class RegisterEventResponse implements
            GeneratedMessage<RegisterEventResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public RegisterEventResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class RegisterListenerCommand implements
            GeneratedMessage<RegisterListenerCommand>
    {
        public String interfaceName = null;
        public String eventName = null;
        
        public RegisterListenerCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public RegisterListenerCommand setEventName(String eventName)
        {
            this.eventName = eventName;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.eventName == null)
                throw new RuntimeException("Field 'eventName' (protobuf message field "
                    + "'event_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.eventName = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.eventName != null)
            {
                String currentValue = eventName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
        }
        
        public RegisterListenerCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("eventName", String.class);
        }
    }
    
    public static class RegisterListenerResponse implements
            GeneratedMessage<RegisterListenerResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public RegisterListenerResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class DeregisterListenerCommand implements
            GeneratedMessage<DeregisterListenerCommand>
    {
        public String interfaceName = null;
        public String eventName = null;
        
        public DeregisterListenerCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public DeregisterListenerCommand setEventName(String eventName)
        {
            this.eventName = eventName;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.eventName == null)
                throw new RuntimeException("Field 'eventName' (protobuf message field "
                    + "'event_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.eventName = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.eventName != null)
            {
                String currentValue = eventName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
        }
        
        public DeregisterListenerCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("eventName", String.class);
        }
    }
    
    public static class DeregisterListenerResponse implements
            GeneratedMessage<DeregisterListenerResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public DeregisterListenerResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class FireEventCommand implements GeneratedMessage<FireEventCommand>
    {
        public String interfaceName = null;
        public String eventName = null;
        public List<Instance> arguments = new ArrayList<Instance>();
        
        public FireEventCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public FireEventCommand setEventName(String eventName)
        {
            this.eventName = eventName;
            return this;
        }
        
        public FireEventCommand setArguments(List<Instance> arguments)
        {
            this.arguments = arguments;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.eventName == null)
                throw new RuntimeException("Field 'eventName' (protobuf message field "
                    + "'event_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.eventName = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.arguments.add(newValue);
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.eventName != null)
            {
                String currentValue = eventName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.arguments != null)
            {
                for (Instance currentValue : arguments)
                {
                    writeFieldNumber(out, 4, 2);
                    byte[] bytes = currentValue.serialize();
                    writeVarBytes(out, bytes);
                }
            }
        }
        
        public FireEventCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("eventName", String.class);
            _typeMap.put("arguments", Instance.class);
        }
    }
    
    public static class RegisterObjectCommand implements
            GeneratedMessage<RegisterObjectCommand>
    {
        public String interfaceName = null;
        public String objectName = null;
        public String doc = null;
        public Instance value = null;
        
        public RegisterObjectCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public RegisterObjectCommand setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public RegisterObjectCommand setDoc(String doc)
        {
            this.doc = doc;
            return this;
        }
        
        public RegisterObjectCommand setValue(Instance value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    String newValue = readString(in);
                    this.doc = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.doc != null)
            {
                String currentValue = doc;
                writeFieldNumber(out, 3, 2);
                writeString(out, currentValue);
            }
            if (this.value != null)
            {
                Instance currentValue = value;
                writeFieldNumber(out, 4, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public RegisterObjectCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
            _typeMap.put("doc", String.class);
            _typeMap.put("value", Instance.class);
        }
    }
    
    public static class RegisterObjectResponse implements
            GeneratedMessage<RegisterObjectResponse>
    {
        public void checkRequired()
        {
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
        }
        
        public RegisterObjectResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
        }
    }
    
    public static class WatchObjectCommand implements GeneratedMessage<WatchObjectCommand>
    {
        public String interfaceName = null;
        public String objectName = null;
        
        public WatchObjectCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public WatchObjectCommand setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
        }
        
        public WatchObjectCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
        }
    }
    
    public static class WatchObjectResponse implements
            GeneratedMessage<WatchObjectResponse>
    {
        public String interfaceName = null;
        public String objectName = null;
        public Instance value = null;
        
        public WatchObjectResponse setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public WatchObjectResponse setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public WatchObjectResponse setValue(Instance value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else if (fieldNumber == 3)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.value != null)
            {
                Instance currentValue = value;
                writeFieldNumber(out, 3, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public WatchObjectResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
            _typeMap.put("value", Instance.class);
        }
    }
    
    public static class UnwatchObjectCommand implements
            GeneratedMessage<UnwatchObjectCommand>
    {
        public String interfaceName = null;
        public String objectName = null;
        
        public UnwatchObjectCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public UnwatchObjectCommand setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
        }
        
        public UnwatchObjectCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
        }
    }
    
    public static class UnwatchObjectResponse implements
            GeneratedMessage<UnwatchObjectResponse>
    {
        public String interfaceName = null;
        public String objectName = null;
        
        public UnwatchObjectResponse setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public UnwatchObjectResponse setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
        }
        
        public UnwatchObjectResponse deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
        }
    }
    
    public static class SetObjectCommand implements GeneratedMessage<SetObjectCommand>
    {
        public String interfaceName = null;
        public String objectName = null;
        public Instance value = null;
        
        public SetObjectCommand setInterfaceName(String interfaceName)
        {
            this.interfaceName = interfaceName;
            return this;
        }
        
        public SetObjectCommand setObjectName(String objectName)
        {
            this.objectName = objectName;
            return this;
        }
        
        public SetObjectCommand setValue(Instance value)
        {
            this.value = value;
            return this;
        }
        
        public void checkRequired()
        {
            if (this.interfaceName == null)
                throw new RuntimeException("Field 'interfaceName' (protobuf message field "
                    + "'interface_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.objectName == null)
                throw new RuntimeException("Field 'objectName' (protobuf message field "
                    + "'object_name') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
            if (this.value == null)
                throw new RuntimeException("Field 'value' (protobuf message field "
                    + "'value') is required as per the protobuf definition "
                    + "but no value for this field seems to be supplied.");
        }
        
        void readFrom(DataInputStream in) throws IOException
        {
            while (in.available() > 0)
            {
                int fieldNumber = readFieldNumber(in);
                if (fieldNumber == 1)
                {
                    String newValue = readString(in);
                    this.interfaceName = newValue;
                }
                else if (fieldNumber == 2)
                {
                    String newValue = readString(in);
                    this.objectName = newValue;
                }
                else if (fieldNumber == 4)
                {
                    Instance newValue = new Instance();
                    byte[] bytes = readVarBytes(in);
                    newValue.deserialize(bytes);
                    this.value = newValue;
                }
                else
                {
                    throw new RuntimeException("Invalid field received: " + fieldNumber);
                }
            }
            checkRequired();
        }
        
        void writeTo(DataOutputStream out) throws IOException
        {
            if (this.interfaceName != null)
            {
                String currentValue = interfaceName;
                writeFieldNumber(out, 1, 2);
                writeString(out, currentValue);
            }
            if (this.objectName != null)
            {
                String currentValue = objectName;
                writeFieldNumber(out, 2, 2);
                writeString(out, currentValue);
            }
            if (this.value != null)
            {
                Instance currentValue = value;
                writeFieldNumber(out, 4, 2);
                byte[] bytes = currentValue.serialize();
                writeVarBytes(out, bytes);
            }
        }
        
        public SetObjectCommand deserialize(byte[] bytes)
        {
            try
            {
                readFrom(new DataInputStream(new ByteArrayInputStream(bytes)));
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            return this;
        }
        
        public byte[] serialize()
        {
            try
            {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                writeTo(new DataOutputStream(out));
                return out.toByteArray();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        
        private static Map<String, Class<?>> _typeMap = new HashMap<String, Class<?>>();
        
        public static Set<String> getFieldNames()
        {
            return _typeMap.keySet();
        }
        
        public static Class<?> getClassForField(String name)
        {
            return _typeMap.get(name);
        }
        
        public Class<?> getInstanceClassForField(String name)
        {
            return getClassForField(name);
        }
        
        public static List<String> getFieldNamesForPrefix(String prefix)
        {
            ArrayList<String> list = new ArrayList<String>();
            for (String name : getFieldNames())
            {
                if (name.startsWith(prefix))
                    list.add(name);
            }
            return list;
        }
        
        public void set(String name, Object value)
        {
            try
            {
                getClass().getField(name).set(this, value);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        @SuppressWarnings("unchecked")
        public <T> T get(String name)
        {
            try
            {
                return (T) getClass().getField(name).get(this);
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
        }
        
        static
        {
            _typeMap.put("interfaceName", String.class);
            _typeMap.put("objectName", String.class);
            _typeMap.put("value", Instance.class);
        }
    }
}
